import configargparse
import numpy as np

# parser = configargparse.ArgumentParser()
# general

# parser = configargparse.ArgumentParser(description='Training Population Estimation')
parser = configargparse.ArgumentParser()
parser.add_argument('-c', '--config', is_config_file=True, help='Path to the config file', type=str)

parser.add_argument('-o', '--no-osm', help='If set, Training Skript wont use OSM Data', default=False,  action='store_true')
parser.add_argument('-s', '--satmode', help='Using Satellite Data only', default=False,  action='store_true')
parser.add_argument('-r', '--resume', type=str, help='if argument is given, skript will continue training given model\  ; argument should be name of the model to be trained')
parser.add_argument('-re', '--resume_extractor', type=str, help=' ')

# parser.add_argument("-d", "--dataset", type=str, default="So2Sat", help="the source domain") 
parser.add_argument("-half", "--half", action='store_true', help="")
parser.add_argument("-treg", "--target_regions", nargs='+', default=["pri2017"], help="the target domains")
parser.add_argument("-tregtrain", "--target_regions_train", nargs='+', default=["pri2017"], help="the target domains")
parser.add_argument("-S1", "--Sentinel1", action='store_true', help="")
parser.add_argument("-S2", "--Sentinel2", action='store_true', help="")
parser.add_argument("-NIR", "--NIR", action='store_true', help="")
parser.add_argument("-VIIRS", "--VIIRS", action='store_true', help="")
parser.add_argument('-b', '--batch_size', help='', type=int, default=64)
parser.add_argument('-wb', '--weak_batch_size', help='', type=int, default=4)
parser.add_argument('-wvb', '--weak_val_batch_size', help='', type=int, default=1)
parser.add_argument('-f', '--feature_dim', help='', type=int, default=32)
parser.add_argument('-pret', '--pretrained', help='', action='store_true')
parser.add_argument("-m", "--model", help='', type=str, default="JacobsUNet")
parser.add_argument("-gr", "--grouped", help='', action='store_true')
parser.add_argument('-par', '--parent', type=str, help=' ', default=None)
parser.add_argument("-omo", "--occupancymodel", help='', action='store_true')
parser.add_argument("-binp", "--buildinginput", help='', action='store_true')
parser.add_argument("-sinp", "--segmentationinput", help='', action='store_true')
parser.add_argument("-posemb", "--useposembedding", help='', action='store_true')
parser.add_argument("-senbuilds", "--sentinelbuildings", help='', action='store_true')
parser.add_argument("-uaf", "--useallfeatures", action='store_true', help="")
parser.add_argument("-dw", "--down", help='', type=int, default=2)
parser.add_argument("-dw2", "--down2", help='', type=int, default=2)
parser.add_argument("-lra", "--lam_raw", help='', type=float, default=1.0)
parser.add_argument('-fe', '--feature_extractor', type=str, help=' ', default="resnet18")
parser.add_argument("-dil", "--dilation", help='', type=int, default=1)
parser.add_argument("-r77", "--replace7x7", action='store_true', help="")
parser.add_argument('-smo', '--supmode', type=str, help="'unsup', 'weaksup'", default="unsup", choices=["unsup", "weaksup"])
parser.add_argument("-nomain", "--nomain", action='store_true', help="no optimization on the So2 dataset")
parser.add_argument("-no_opt", "--no_opt", action='store_true', help="no optimization")

#Training
parser.add_argument('-e', '--num_epochs', help='', type=int, default=20)
parser.add_argument('-lr', '--learning_rate', help='', type=float, default=1e-4)
parser.add_argument("-exZH", "--excludeZH", action='store_true', help="")
parser.add_argument('-optim', '--optimizer', type=str, default="Adam", choices=["Adam", "SGD"])
parser.add_argument('-b1', '--beta1', help='', type=float, default=0.0)
parser.add_argument('-gacc', '--gradientaccumulation', action='store_true', help="")
parser.add_argument('-swa', '--stochasticWA', action='store_true', help="")
parser.add_argument('-l', '--loss', nargs='+', default=["l1_loss"], help="list composed of 'l1_loss', 'log_l1_loss', 'mse_loss', 'log_mse_loss', 'focal_loss','tversky_loss', 'gaussian_nll', 'laplacian_nll', 'L1reg'")
parser.add_argument('-sreg', '--scale_regularization', default=0.0, type=float, help="")
parser.add_argument('-sreg2', '--scale_regularizationL2', default=0.0, type=float, help="")
parser.add_argument('-oreg', '--output_regularization', default=0.0, type=float, help="")
parser.add_argument('-esr2', '--emptyscale_regularizationL2', default=0.0, type=float, help="")
parser.add_argument('-eeps', '--empty_eps', default=0.0, type=float, help="")
parser.add_argument('-leeps', '--lempty_eps', default=0.0, type=float, help="")
parser.add_argument('-la', '--lam', nargs='+', type=float, default=[1.0], help="list composed of loss weightings")
parser.add_argument("-lw", "--lam_weak", help='', type=float, default=1.0)
parser.add_argument("-adv", "--adversarial", action='store_true', help="")
parser.add_argument("-ladv", "--lam_adv", help='', type=float, default=0.1)
parser.add_argument("-cor", "--CORAL", action='store_true', help="")
parser.add_argument("-lc", "--lam_coral", help='', type=float, default=1.0)
parser.add_argument("-mmd", "--MMD", action='store_true', help="")
parser.add_argument("-lmmd", "--lam_mmd", help='', type=float, default=1.0)
# parser.add_argument("-clasif", "--classifier", default="v8", help="")
# parser.add_argument("-GANonly", "--GANonly", action='store_true', help="")
# parser.add_argument("-CyCADAGcheck", "--CyCADAGANcheckpoint", type=str, default="eu2rwa_cycleganFreeze", help="")
# parser.add_argument("-CyCADAScheck", "--CyCADASourcecheckpoint", type=str, default="", help="")
# parser.add_argument("-CyCADA", "--CyCADA", action='store_true', help="")
# parser.add_argument("-CyCADAc", "--CyCADAcontinue", action='store_true', help="")
# parser.add_argument("-CyCADAnetG",'--CyCADAnetG', type=str, default='resnet_9blocks', help='specify generator architecture [resnet_9blocks | resnet_6blocks | unet_256 | unet_128]')
# parser.add_argument("-ltc", "--lam_targetconsistency", help='', type=float, default=1.0)
# parser.add_argument("-lcfB", "--lambda_consistency_fake_B", help='', type=float, default=1.0)
# parser.add_argument("-lcrB", "--lambda_consistency_real_B", help='', type=float, default=10.0)
# parser.add_argument("-lpopB", "--lambda_popB", help='', type=float, default=1.0)
# parser.add_argument("-lssc", "--lam_selfsupervised_consistency", help='', type=float, default=1.0)
# parser.add_argument("-e2rwa", "--eu2rwa", action='store_true', help="")

parser.add_argument("-head", "--head", default="v1", help="")

parser.add_argument('-wd', '--weightdecay', help='', type=float, default=0.0)
parser.add_argument('-wdp', '--weightdecay_pos', help='', type=float, default=0.01)
parser.add_argument('-wdu', '--weightdecay_unet', help='', type=float, default=0.0)
parser.add_argument('-ls', '--lassoreg', help='Lasso style regularization of the preds.', type=float, default=0.0)
parser.add_argument('-tv', '--tv', help='Total variation regularization of the preds.', type=float, default=0.0)
parser.add_argument("-rse", "--random_season", action='store_true', help="")
parser.add_argument('-lrs', '--lr_step', help='', type=int, default=10)
parser.add_argument('-lrg', '--lr_gamma', help='', type=float, default=0.75)
parser.add_argument('-gc', '--gradient_clip', help='', type=float, default=0.01)
parser.add_argument('--skip-first', action='store_true', help='Don\'t optimize during first epoch')
parser.add_argument('-fa', '--full_aug', action='store_true', help='')
parser.add_argument('-ascAug', '--ascAug', action='store_true', help='')

parser.add_argument("-lm", "--lam_builtmask", help='', type=float, default=0.)
parser.add_argument("-ld", "--lam_dense", help='', type=float, default=1.)

# misc
parser.add_argument('--save-dir', default='/scratch2/metzgern/HAC/POMELOv2_results', help='Path to directory where models and logs should be saved')
parser.add_argument('-w', '--num_workers', help='', type=int, default=4)
parser.add_argument("-wp", "--wandb_project", help='', type=str, default="POMELOv2")
parser.add_argument('-lt', '--logstep_train', help='', type=int, default=25)
parser.add_argument('-val', '--val_every_n_epochs', help='', type=int, default=1)
parser.add_argument('-wv', '--weak_validation', help='', action='store_true')
parser.add_argument('-testi', '--test_every_i_steps', help='', type=int, default=500000)
parser.add_argument('-vi', '--val_every_i_steps', help='', type=int, default=500000)
parser.add_argument("--seed", help='', type=int, default=1610)
parser.add_argument('--save-model', default='both', choices=['last', 'best', 'no', 'both'])
parser.add_argument('-ms', '--max_samples', help='', type=int, default=1e15)
parser.add_argument('-mws', '--max_weak_samples', help='', type=int, default=None)
parser.add_argument('-mwp', '--max_weak_pix', help='', type=int, default=10000000)
parser.add_argument('-tlevel', '--train_level', nargs='+', default=["fine"] )
parser.add_argument("--in_memory", action='store_true', help='')
parser.add_argument("--merge_aug", type=int, default=2, help='Number of Admin regions to merge, Defaults 1 with equivalent to no augmentations, so better not use this. Must be a power of 2 and a divisor of the batchsize.')
parser.add_argument("-wma", "--weak_merge_aug", action='store_true', help='')

args = parser.parse_args()